import numpy as np

def find_Zin():
    """
    Рассчитывает входное сопротивление (Zin) линии передачи на заданном
    расстоянии (dz) от нагрузки (Zn) с известным волновым сопротивлением (W).
    """
    print("----------------------------------------------------------------------------------------------------------\n"
          "Поиск входного сопротивления на расстоянии от нагрузки\n")

    # --- Входные данные ---
    W_input = input("Введите волновое сопротивление линии W (по умолчанию 1): ")
    W = float(W_input) if W_input != '' else 1.0

    Rn_input = input("Введите активную составляющую нагрузки Rn (по умолчанию 0): ")
    Rn = float(Rn_input) if Rn_input != '' else 0.0

    Xn_input = input("Введите реактивную составляющую нагрузки Xn со знаком (по умолчанию 0): ")
    Xn = float(Xn_input) if Xn_input != '' else 0.0

    Zn = complex(Rn, Xn)

    dz = float(input("Введите расстояние от нагрузки, нормированное относительно λ: "))

    # --- Расчет ---

    # Шаг 1: Преобразуем сопротивление нагрузки (Zn) в коэффициент отражения на нагрузке (Gamma_L)
    # Формула: Gamma = (Z - Z0) / (Z + Z0)
    gamma_load = (Zn - W) / (Zn + W)

    # Шаг 2: Рассчитываем фазовый сдвиг при движении от нагрузки к генератору на расстояние dz.
    # "Движение по линии" - это поворот вектора Gamma в комплексной плоскости.
    # Фазовый сдвиг равен exp(-2j * beta * d), где d = dz*lambda, а beta = 2*pi/lambda.
    # В итоге, beta * d = 2 * pi * dz.
    phase_shift = np.exp(-2j * 2 * np.pi * dz)

    # Шаг 3: Находим входной коэффициент отражения (Gamma_in), повернув Gamma_L на рассчитанный угол
    gamma_in = gamma_load * phase_shift

    # Шаг 4: Преобразуем входной коэффициент отражения (Gamma_in) обратно во входное сопротивление (Zin)
    # Формула: Z = Z0 * (1 + Gamma) / (1 + Gamma)
    Zin_val = W * (1 + gamma_in) / (1 - gamma_in)

    # --- Вывод результата ---
    print(f"\nРезультат:"
          f"\nВходное сопротивление линии на расстоянии {dz}λ от нагрузки составляет:")
    # :.2f - форматировать до 2 знаков после запятой
    # :+.2f - то же самое, но всегда показывать знак (+ или -)
    print(f"Zin = {Zin_val.real:.2f}{Zin_val.imag:+.2f}j Ом")
